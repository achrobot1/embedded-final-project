/*
 * adventures_with_ip.c
 *
 * Main source file. Contains main() and menu() functions.
 */
#include "adventures_with_ip.h"
#include "ssd.h"
#include "delay_times.h"




/* ---------------------------------------------------------------------------- *
 * 									main()										*
 * ---------------------------------------------------------------------------- *
 * Runs all initial setup functions to initialise the audio codec and IP
 * peripherals, before calling the interactive menu system.
 * ---------------------------------------------------------------------------- */
int main(void)
{
	xil_printf("Entering Main\r\n");
	//Configure the IIC data structure
	IicConfig(XPAR_XIICPS_0_DEVICE_ID);

	//Configure the Audio Codec's PLL
	AudioPllConfig();

	xil_printf("SSM2603 configured\n\r");


	/* Initialise GPIO and NCO peripherals */
	gpio_init();
	nco_init(&Nco);

	u32 switch_inputs;
	u32 prev_input;
	u16 delay_time = 0xFFFF;

	while(1)
	{
		switch_inputs = XGpio_DiscreteRead(&Gpio, SWITCH_CHANNEL);

		if(switch_inputs != prev_input)
		{
			switch(switch_inputs)
			{
				case 0x0: delay_time = 0xFFFF;
					break;
				case 0x1: delay_time = E_delay;
					XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, E);
					break;
				case 0x2: delay_time = A_delay;
					XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, A);
					break;
				case 0x3: delay_time = D_delay;
					XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, D);
					break;
				case 0x4: delay_time = G_delay;
					XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, G);
					break;
				case 0x5: delay_time = B_delay;
					XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, B);
					break;
				case 0x6: delay_time = e_delay;
					XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, e);
					break;
				case 0x7: delay_time = drop_D_delay;
					XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, D);
					break;
				default: delay_time = 0xFFFF;
					break;


			}

		}

		if(delay_time != 0xFFFF)
		{
			Xil_Out32(I2S_DATA_TX_L_REG, 0x0000FFFF);
			Xil_Out32(I2S_DATA_TX_R_REG, 0x0000FFFF);
			usleep(delay_time);
			Xil_Out32(I2S_DATA_TX_L_REG, 0x0);
			Xil_Out32(I2S_DATA_TX_R_REG, 0x0);
			usleep(delay_time);
		}


		/*
		XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, E);
		sleep(1);
		XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, A);
		sleep(1);
		XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, D);
		sleep(1);
		XGpio_DiscreteWrite(&Gpio, SSD_CHANNEL, G);
		sleep(1);
		*/


		// XGpio_DiscreteWrite(&Ssd_gpio, SSD_CHANNEL, 0x7F);

	}


	xil_printf("GPIO and NCO peripheral configured\r\n");

	/* Display interactive menu interface via terminal */
	menu();
    return 1;
}

/* ---------------------------------------------------------------------------- *
 * 									menu()										*
 * ---------------------------------------------------------------------------- *
 * Presented at system startup. Allows the user to select between three
 * options by pressing certain keys on the keyboard:
 * 		's' - 	Audio loopback streaming
 * 		'n' - 	Tonal noise is generated by an NCO and added to the audio
 * 				being captured from the audio codec.
 * 		'f' - 	The audio + tonal noise is passed to an adaptive LMS noise
 * 				cancellation filter which will use the tonal noise estimate
 * 				to remove the noise from the audio.
 *
 * 	This menu is shown upon exiting from any of the above options.
 * ---------------------------------------------------------------------------- */
void menu(){
	u8 inp = 0x00;
	u32 CntrlRegister;

	/* Turn off all LEDs */
	// Xil_Out32(LED_BASE, 0);

	XGpio_DiscreteWrite(&Gpio_audio_enable, 1, 0);

	CntrlRegister = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_CR_OFFSET);

	XUartPs_WriteReg(UART_BASEADDR, XUARTPS_CR_OFFSET,
				  ((CntrlRegister & ~XUARTPS_CR_EN_DIS_MASK) |
				   XUARTPS_CR_TX_EN | XUARTPS_CR_RX_EN));

	xil_printf("\r\n\r\n");
	xil_printf("Embedded LMS Filtering Demo\r\n");
	xil_printf("Enter 's' to stream pure audio, 'n' to add tonal noise and 'f' to adaptively filter\r\n");
	xil_printf("----------------------------------------\r\n");

	// Wait for input from UART via the terminal
	while (!XUartPs_IsReceiveData(UART_BASEADDR));
				inp = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
	// Select function based on UART input
	switch(inp){
	case 's':
		xil_printf("STREAMING AUDIO\r\n");
		xil_printf("Press 'q' to return to the main menu\r\n");
		XGpio_DiscreteWrite(&Gpio_audio_enable, 1, 1);
		audio_stream();
		break;
	case 'n':
		xil_printf("ENTERING NOISE GENERATION OPERATION\r\n");
		xil_printf("Select step size via the DIP switches...\r\n\n");
		xil_printf("Press 'q' to return to the main menu\r\n");
		XGpio_DiscreteWrite(&Gpio_audio_enable, 1, 1);
		tonal_noise();
		break;
	case 'f':
		xil_printf("ENTERING LMS FILTERING OPERATION\r\n");
		xil_printf("Press 'q' to return to the main menu\r\n");
		XGpio_DiscreteWrite(&Gpio_audio_enable, 1, 1);
		lms_filter();
		break;
	default:
		menu();
		break;
	} // switch
} // menu()


